/**
 * Citibank EventHandler
 * Test description
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/EventSerializers'));
    } else {
        // Browser globals (root is window)
        if (!root.CitibankEventHandler) {
            root.CitibankEventHandler = {};
        }
        root.CitibankEventHandler.EventsApi = factory(
            root.CitibankEventHandler.ApiClient,
            root.CitibankEventHandler.EventSerializers,
        );
    }
})(this, function(ApiClient, EventSerializers) {
    'use strict';

    /**
     * Events service.
     * @module api/EventsApi
     * @version 0.0.1
     */

    /**
     * Constructs a new EventsApi.
     * @alias module:api/EventsApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    var exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;

        /**
         * Callback function to receive the result of the eventsCreate operation.
         * @callback module:api/EventsApi~eventsCreateCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EventSerializers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {module:model/EventSerializers} data
         * @param {module:api/EventsApi~eventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/EventSerializers}
         */
        this.eventsCreate = function(data, callback) {
            var postBody = data;

            // verify the required parameter 'data' is set
            if (data === undefined || data === null) {
                throw new Error("Missing the required parameter 'data' when calling eventsCreate");
            }

            var pathParams = {};
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = EventSerializers;

            return this.apiClient.callApi(
                '/events/',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the eventsDelete operation.
         * @callback module:api/EventsApi~eventsDeleteCallback
         * @param {String} error Error message, if any.
         * @param data This operation does not return a value.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {Number} id A unique integer value identifying this event.
         * @param {module:api/EventsApi~eventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
         */
        this.eventsDelete = function(id, callback) {
            var postBody = null;

            // verify the required parameter 'id' is set
            if (id === undefined || id === null) {
                throw new Error("Missing the required parameter 'id' when calling eventsDelete");
            }

            var pathParams = {
                id: id,
            };
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = null;

            return this.apiClient.callApi(
                '/events/{id}/',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the eventsList operation.
         * @callback module:api/EventsApi~eventsListCallback
         * @param {String} error Error message, if any.
         * @param {Array.<module:model/EventSerializers>} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {module:api/EventsApi~eventsListCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Array.<module:model/EventSerializers>}
         */
        this.eventsList = function(callback) {
            var postBody = null;

            var pathParams = {};
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = [EventSerializers];

            return this.apiClient.callApi(
                '/events/',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the eventsPartialUpdate operation.
         * @callback module:api/EventsApi~eventsPartialUpdateCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EventSerializers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {Number} id A unique integer value identifying this event.
         * @param {module:model/EventSerializers} data
         * @param {module:api/EventsApi~eventsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/EventSerializers}
         */
        this.eventsPartialUpdate = function(id, data, callback) {
            var postBody = data;

            // verify the required parameter 'id' is set
            if (id === undefined || id === null) {
                throw new Error("Missing the required parameter 'id' when calling eventsPartialUpdate");
            }

            // verify the required parameter 'data' is set
            if (data === undefined || data === null) {
                throw new Error("Missing the required parameter 'data' when calling eventsPartialUpdate");
            }

            var pathParams = {
                id: id,
            };
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = EventSerializers;

            return this.apiClient.callApi(
                '/events/{id}/',
                'PATCH',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the eventsRead operation.
         * @callback module:api/EventsApi~eventsReadCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EventSerializers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {Number} id A unique integer value identifying this event.
         * @param {module:api/EventsApi~eventsReadCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/EventSerializers}
         */
        this.eventsRead = function(id, callback) {
            var postBody = null;

            // verify the required parameter 'id' is set
            if (id === undefined || id === null) {
                throw new Error("Missing the required parameter 'id' when calling eventsRead");
            }

            var pathParams = {
                id: id,
            };
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = EventSerializers;

            return this.apiClient.callApi(
                '/events/{id}/',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the eventsUpdate operation.
         * @callback module:api/EventsApi~eventsUpdateCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EventSerializers} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         *
         * @param {Number} id A unique integer value identifying this event.
         * @param {module:model/EventSerializers} data
         * @param {module:api/EventsApi~eventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/EventSerializers}
         */
        this.eventsUpdate = function(id, data, callback) {
            var postBody = data;

            // verify the required parameter 'id' is set
            if (id === undefined || id === null) {
                throw new Error("Missing the required parameter 'id' when calling eventsUpdate");
            }

            // verify the required parameter 'data' is set
            if (data === undefined || data === null) {
                throw new Error("Missing the required parameter 'data' when calling eventsUpdate");
            }

            var pathParams = {
                id: id,
            };
            var queryParams = {};
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = ['Basic'];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = EventSerializers;

            return this.apiClient.callApi(
                '/events/{id}/',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };
    };

    return exports;
});
