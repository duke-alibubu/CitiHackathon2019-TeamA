/**
 * Citibank Reporting
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'));
    } else {
        // Browser globals (root is window)
        if (!root.CitibankReporting) {
            root.CitibankReporting = {};
        }
        root.CitibankReporting.DefaultApi = factory(root.CitibankReporting.ApiClient);
    }
})(this, function(ApiClient) {
    'use strict';

    /**
     * Default service.
     * @module api/DefaultApi
     * @version 0.0.1
     */

    /**
     * Constructs a new DefaultApi.
     * @alias module:api/DefaultApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    var exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;

        /**
         * Callback function to receive the result of the getDemographicApi operation.
         * @callback module:api/DefaultApi~getDemographicApiCallback
         * @param {String} error Error message, if any.
         * @param data This operation does not return a value.
         * @param {String} response The complete HTTP response.
         */

        /**
         * @param {String} eventId
         * @param {module:api/DefaultApi~getDemographicApiCallback} callback The callback function, accepting three arguments: error, data, response
         */
        this.getDemographicApi = function(eventId, callback) {
            var postBody = null;

            // verify the required parameter 'eventId' is set
            if (eventId === undefined || eventId === null) {
                throw new Error("Missing the required parameter 'eventId' when calling getDemographicApi");
            }

            var pathParams = {};
            var queryParams = {
                eventId: eventId,
            };
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = null;

            return this.apiClient.callApi(
                '/reports/demographic',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the getHistoricalApi operation.
         * @callback module:api/DefaultApi~getHistoricalApiCallback
         * @param {String} error Error message, if any.
         * @param data This operation does not return a value.
         * @param {String} response The complete HTTP response.
         */

        /**
         * @param {Object} opts Optional parameters
         * @param {String} opts.fromDate
         * @param {String} opts.toDate
         * @param {module:api/DefaultApi~getHistoricalApiCallback} callback The callback function, accepting three arguments: error, data, response
         */
        this.getHistoricalApi = function(opts, callback) {
            opts = opts || {};
            var postBody = null;

            var pathParams = {};
            var queryParams = {
                fromDate: opts['fromDate'],
                toDate: opts['toDate'],
            };
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = null;

            return this.apiClient.callApi(
                '/reports/historical',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the getOrganizationApi operation.
         * @callback module:api/DefaultApi~getOrganizationApiCallback
         * @param {String} error Error message, if any.
         * @param data This operation does not return a value.
         * @param {String} response The complete HTTP response.
         */

        /**
         * @param {String} organizerName
         * @param {module:api/DefaultApi~getOrganizationApiCallback} callback The callback function, accepting three arguments: error, data, response
         */
        this.getOrganizationApi = function(organizerName, callback) {
            var postBody = null;

            // verify the required parameter 'organizerName' is set
            if (organizerName === undefined || organizerName === null) {
                throw new Error("Missing the required parameter 'organizerName' when calling getOrganizationApi");
            }

            var pathParams = {};
            var queryParams = {
                organizerName: organizerName,
            };
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = null;

            return this.apiClient.callApi(
                '/reports/organization',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };

        /**
         * Callback function to receive the result of the getUserHistoricalApi operation.
         * @callback module:api/DefaultApi~getUserHistoricalApiCallback
         * @param {String} error Error message, if any.
         * @param data This operation does not return a value.
         * @param {String} response The complete HTTP response.
         */

        /**
         * @param {String} userId
         * @param {Object} opts Optional parameters
         * @param {String} opts.fromDate
         * @param {String} opts.toDate
         * @param {module:api/DefaultApi~getUserHistoricalApiCallback} callback The callback function, accepting three arguments: error, data, response
         */
        this.getUserHistoricalApi = function(userId, opts, callback) {
            opts = opts || {};
            var postBody = null;

            // verify the required parameter 'userId' is set
            if (userId === undefined || userId === null) {
                throw new Error("Missing the required parameter 'userId' when calling getUserHistoricalApi");
            }

            var pathParams = {};
            var queryParams = {
                userId: userId,
                fromDate: opts['fromDate'],
                toDate: opts['toDate'],
            };
            var collectionQueryParams = {};
            var headerParams = {};
            var formParams = {};

            var authNames = [];
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var returnType = null;

            return this.apiClient.callApi(
                '/reports/user-historical',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback,
            );
        };
    };

    return exports;
});
